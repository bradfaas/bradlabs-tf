version: 0.2

phases:
  install:
    commands:
      - curl -fsSL https://releases.hashicorp.com/terraform/1.9.5/terraform_1.9.5_linux_amd64.zip -o tf.zip
      - unzip -q tf.zip && mv terraform /usr/local/bin/ && terraform -version
  
  pre_build:
    commands:
      - set -e
      - if [ -z "${WINDOWS_APPS_JSON:-}" ]; then WINDOWS_APPS_JSON='[]'; fi
      - if [ -z "${LINUX_APPS_JSON:-}" ]; then LINUX_APPS_JSON='[]'; fi
      - if [ -z "${TAGS_JSON:-}" ]; then TAGS_JSON='{"project":"hands-on-lab"}'; fi
      - |
        python3 - <<'PY'
        import os, json, sys
        def jload(env, default_json):
            try:
                return json.loads(os.environ.get(env, default_json))
            except Exception as e:
                sys.stderr.write(f"Invalid JSON in ${env}: {e}\n"); sys.exit(2)
        out = {
            "region": os.environ["STATE_REGION"],
            "lab_id": os.environ["LAB_ID"],
            "user_id": os.environ["USER_ID"],
            "s3_app_bucket": os.environ["APP_BUCKET"],
            "domain_admin_password": os.environ["DOMAIN_ADMIN_PASSWORD"],
            "linux_user_password": os.environ.get("LINUX_DESKTOP_PASSWORD",""),
            "windows_admin_password": os.environ.get("WINDOWS_ADMIN_PASSWORD") or None,
            "create_domain_user": (os.environ.get("CREATE_DOMAIN_USER","true").lower() == "true"),
            "domain_user_password": os.environ.get("DOMAIN_USER_PASSWORD"),
            "windows_apps": jload("WINDOWS_APPS_JSON","[]"),
            "linux_apps": jload("LINUX_APPS_JSON","[]"),
            "tags": jload("TAGS_JSON",'{"project":"hands-on-lab"}')
        }
        with open("lab.auto.tfvars.json","w") as f: json.dump(out, f)
        PY
      - export TF_STATE_KEY="labs/${LAB_ID}.tfstate"
      - 'echo "State: s3://${STATE_BUCKET}/${TF_STATE_KEY}"'

  build:
    commands:
      - set -e
      - 'echo "PWD: $(pwd)"'
      - ls -la
      - terraform init -backend-config="bucket=${STATE_BUCKET}" -backend-config="key=${TF_STATE_KEY}" -backend-config="region=${STATE_REGION}"
      - |
        if [ "${DESTROY:-false}" = "true" ]; then
          'echo "[Build] DESTROY=true -> running terraform destroy"'
          terraform destroy -auto-approve
          # Ensure artifact exists even on destroy
          echo '{}' > tf-outputs.json
        else
          'echo "[Build] Applying lab infrastructure"'
          terraform apply -auto-approve
          # Write outputs; if there are none (or an intermittent error), still produce a file
          terraform output -json > tf-outputs.json || echo '{}' > tf-outputs.json
        fi
      - 'echo "[Build] Final artifact contents:"'
      - ls -la tf-outputs.json




artifacts:
  files:
    - tf-outputs.json
